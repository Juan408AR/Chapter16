*Ch 17.4 Binary I/O Class:
    +Java programs can read binary which allows portability.
    There is an object, this object is either an input or output subclass,
    then there is file,filter,and stream that is unique depending if it is a input or output.
    Then there is a buffer and data subclass.
    ! in general most I/O have and require a way to handle an exception whether it be try and catch or a throws
*Ch 17.4.1 FileInputStream/FileOutputStream:
    +Lean how to use the classes fileInputStream and fileOutputStream and
    ! we use "try with resources" to close something that needs to be closed automatically
    using the try with resources trick.
*Ch 17.4.2 FilterInputStream/FilterOutputStream:
    +Filter stream only works with bytes and characters...
    ! a wrapper class is needed if you want to work with other real numbers such as integers and doubles
    known as primitive numeric types. ...we a are give a class DataInput/OutputStream to handle such as case
*Ch 17.4.3 DataInputStream/DataOutputStream: both of these are specialization of their respective Filter class
    +The DataInputStream converts byte to primitive data whereas and DataOutputStream does the opposite.
    We use the appropriate Data read/writer depending on the data because sometimes the data
    has data that is not used which allows use to ignore the useless sections and obtain only
    the useful portion...this saves time and space. The ex we used was ascii being in lower byte compared to the unicode needing
    two bytes, but if we want only ascii we can ignore the upper byte of the unicode if possible.
    +If you keep reading data at the end of an inputStream an exception will occur, you can use this to check if the
    end of a file has been reached. We use an inner try w/ resource to automatically close our I/O stream
    and an outer one to catch the end of the file
*Ch 17.4.4 BufferedInputStream/BufferedOutputStream: faster than one by one
    from stack----+ Think of what happens when you want to read data from a harddisk. To read a byte at a certain location, you have
    to wait until the disk has rotated until the head is above the location on disk where the byte to be read is.
     If you'd read just 1 byte at that moment, and the next byte later, you'd have to wait until the disk has made a
     full rotation to read the next byte. It's much more efficient to read a block of consecutive bytes.
    + Instead of reading one by one then try to find the next data to read which could create some background work try to
    access the data again, you could read data as chunks into a buffer(location in memory) and then from there process the data...
    this is better because there is less background work since you read a chunk and are not going through the issue of jumping
    to the next byte of data.
    + You have to be able to handle the issues of when the buffer is full by releasing the data in the buffer somehow
    in order to process the next chunk of data if possible.
*Ch 17.5 Case Study: Copying Files
    + We will create a utility to copy files.
*17.6 Object I/O: we've learned about streams for data that is primitive but now we will apply
    a similar aspect to using an object stream
    + syntax for wrapper public objectinputstream(inputstram in)
    + !! Don't forget to handle the expression because some object/methods require you to handle the expression by using a throws or a catch or even both idk lol
    + 17.6.1 The Serializable Interface: learned how to store/read objectstreams into files this
        allows use to store versions of an object into a byte stream
    + 17.7: Random Access file: learned how to read and write or just one into a file in any order...
        Random access file means you can access the file I/O in any position in the file that the user desires
        ...in prior lessons we read and wrote in a sequential order but here we have
        a 'pointer' and can set its index


